@startuml

' Define data classes for model
class Attend {
    attendId: Long?
    studentId: Long
    entryTimes: LocalTime
    exitingTimes: LocalTime?
    purpose: String
    date: LocalDate
}

class Books {
    bookId: String
    bookTitle: String
    bookQuan: Int
    languageId: String
    collegeId: String
    bookType: String
}

class BookSponsorships {
    bookId: String
    sponsorId: Int
    bookType: String
    numberOfBook: Int
    sponsorDate: LocalDate
}

class BorrowBook {
    borrowId: Long?
    bookId: String
    studentId: Long
    borrowDate: LocalDate
    giveBackDate: LocalDate
    isBringBack: Boolean
}

class Sponsor {
    sponsorId: Int?
    sponsorName: String
}

class SponsorDetail {
    sponsorName: String
    bookId: String
    bookTitle: String
    number: Int
    languageId: String
    collegeId: String
    bookType: String
    sponsorDate: LocalDate
}

class Students {
    studentId: Long?
    studentName: String
    gender: String
    dateOfBirth: LocalDate
    degreeLevelId: String
    majorId: String
    generation: Int
}
' Define data classes for dto
class AttendDetail {
    studentId: Long
    studentName: String
    gender: String
    majorName: String
    generation: Int
    entryTimes: LocalTime
    exitingTimes: LocalTime?
    purpose: String
    status: String?
}

class CompareValue {
    currentValue: Int
    previousValue: Int
}

class DayVisitor {
    day: String
    count: Int
}

class TotalMajorVisitor {
    majorName: String
    totalAmount: Int
}

class StudentDto{
    val studentId: Long?,
    val studentName: String,
    val gender: String,
    val dateOfBirth: LocalDate,
    val degreeLevel: String,
    val majorName: String,
    val generation: Int
}

' Define interfaces with their methods
interface ICrudRepository <<NoRepositoryBean>> {
    +suspend save(entity: T): T
    +suspend update(entity: T): T
    +suspend getById(id: ID): T?
    +getAll(): Flow<T>
    +suspend delete(id: ID): Boolean
}

interface BookRepository <<Repository>> extends ICrudRepository {
    +suspend bookAvailable(): List<BookAvailableDto>
}

interface BorrowBookRepository <<Repository>> extends ICrudRepository {
    +customBorrow(date: Date): Flow<BorrowBook>
    +suspend countBorrowPerWeek(): Map<LocalDate, Int>
    +suspend countCurrentAndPreviousBorrow(date: LocalDate, period: Int): CompareValue
}

interface SponsorRepository extends ICrudRepository {
    +suspend saveSponsorship(sponsorships: BookSponsorships): BookSponsorships
    +suspend countCurrentAndPreviousSponsor(date: LocalDate, period: Int): CompareValue
}

interface StudentRepository <<Repository>> extends ICrudRepository {
    +getStudentDetail(): Flow<List<StudentDto>>
    +suspend getStudentDetailById(studentId: Long): StudentDto?
}

interface AttendRepository <<Repository>> extends ICrudRepository {
    +getCustomAttend(date: LocalDate): Flow<List<Attend>>
    +suspend updateExitingTime(exitingTimes: LocalTime, studentId: Long, date: LocalDate): Long
    +suspend count(date: LocalDate, period: Int): Int?
    +suspend getAttendByStudentID(studentId: Long, date: LocalDate): Attend?
    +suspend getWeeklyVisit(): List<DayVisitor>
    +suspend countCurrentAndPreviousAttend(date: LocalDate, period: Int): CompareValue
    +suspend getAttendDetail(date: LocalDate): List<AttendDetail>
    +suspend totalMajorVisit(): List<TotalMajorVisitor>
    +getAttendDetailByPeriod(date: LocalDate, entryTime: LocalTime, exitingTime: LocalTime): Flow<AttendDetail>
}

' Relationships in repository
AttendRepository --> Attend
StudentRepository --> Students
BookRepository --> Books
SponsorRepository --> Sponsor
BorrowBookRepository --> BorrowBook

' Define interfaces implementation
' Define AttendRepositoryImp class
class AttendRepositoryImp  {
    -client: DatabaseClient
    +getCustomAttend(date: LocalDate): Flow<List<Attend>>
    +suspend save(entity: Attend): Attend
    +suspend update(entity: Attend): Attend
    +suspend getById(id: Long): Attend?
    +getAll(): Flow<Attend>
    +suspend delete(id: Long): Boolean
    +suspend updateExitingTime(exitingTimes: LocalTime, studentId: Long, date: LocalDate): Long
    +suspend count(date: LocalDate, period: Int): Int?
    +suspend getAttendByStudentID(studentId: Long, date: LocalDate): Attend?
    +suspend getWeeklyVisit(): List<DayVisitor>
    +suspend countCurrentAndPreviousAttend(date: LocalDate, period: Int): CompareValue
    +suspend getAttendDetail(date: LocalDate): List<AttendDetail>
    +suspend totalMajorVisit(): List<TotalMajorVisitor>
    +getAttendDetailByPeriod(date: LocalDate, entryTime: LocalTime, exitingTime: LocalTime): Flow<AttendDetail>
    -paramMap(attend: Attend): Map<String, Any?>
    -Row.mapToAttend(): Attend
    -Row.mapToAttendDetail(): AttendDetail
}
' Define AttendRepositoryImp class
class BorrowBookRepositoryImp{
    +<<constructor>> BorrowBookRepositoryImp(DatabaseClient client)
    +suspend save(entity: T): T
    +suspend update(entity: T): T
    +suspend getById(id: ID): T?
    +getAll(): Flow<T>
    +suspend delete(id: ID): Boolean
    +customBorrow(date: Date): Flow<BorrowBook>
    +suspend countBorrowPerWeek(): Map<LocalDate, Int>
    +suspend countCurrentAndPreviousBorrow(date: LocalDate, period: Int): CompareValue
    -Row.rowMapping(): BorrowBook
    -paramsMap(borrow: BorrowBook): Map<String, Any>
}

class StudentRepositoryImp {
    +<<constructor>> StudentRepositoryImp(DatabaseClient client)
    +suspend save(entity: T): T
    +suspend update(entity: T): T
    +suspend getById(id: ID): T?
    +getAll(): Flow<T>
    +suspend delete(id: ID): Boolean
    -paramMap(students: Students): Map<String, Any>
    -Row.mapToStudent(): Students
    -Row.mapToStudentDto(): StudentDto
}
' Relationships in attend repo impl
AttendRepositoryImp <|-- AttendRepository
AttendRepositoryImp --> Attend
AttendRepositoryImp --> AttendDetail
AttendRepositoryImp --> CompareValue
AttendRepositoryImp --> DayVisitor
AttendRepositoryImp --> TotalMajorVisitor

' Relationships in Borrow repo impl
BorrowBookRepositoryImp <|-- BorrowBookRepository
BorrowBookRepositoryImp --> BorrowBook : uses
BorrowBookRepositoryImp --> CompareValue : uses
' Relationships in Student repo impl
StudentRepositoryImp <|-- StudentRepository
StudentRepositoryImp --> Students
StudentRepositoryImp --> StudentDto


@enduml